package de.unistuttgart.iaas.faas.quantumservice.messaging;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.TextMessage;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import de.unistuttgart.iaas.faas.quantumservice.configuration.IBMQProperties;
import de.unistuttgart.iaas.faas.quantumservice.model.entity.eventtrigger.EventPayload;
import de.unistuttgart.iaas.faas.quantumservice.model.entity.eventtrigger.EventTrigger;
import de.unistuttgart.iaas.faas.quantumservice.service.EventTriggerService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * This class represents a JMS Event-Driven Consumer.
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class EventReceiver {

    private final IBMQProperties ibmqProperties;
    private final EventTriggerService eventTriggerService;
    private final ObjectMapper objectMapper;

    /**
     * This method uses JMS to receive messages from the topic 'EVENT.TOPIC'. These messages represent events that were
     * generated by the EventSource.
     *
     * @param message
     * @throws JMSException
     */
    @Transactional
    @JmsListener(destination = "QC.EVENT.QUEUE")
    public void onEvent(Message message) throws JMSException, JsonProcessingException {
        // TextMessages are expected that contain the JobResult as a JSON-String
        if (message instanceof TextMessage) {
            String eventAsJson = ((TextMessage) message).getText();
            EventPayload eventPayload = objectMapper.readValue(eventAsJson, EventPayload.class);
            eventPayload.getEventPayloadProperties().put("apiToken", ibmqProperties.getApiToken());
            log.info("Got Event: " + eventAsJson);

            for (EventTrigger eventTrigger: eventTriggerService.findByEventType(eventPayload)) {
                eventTriggerService.fireEventTrigger(eventTrigger, eventPayload);
            }
        }
    }
}
